{"version":3,"file":"static/js/332.ee766c7e.chunk.js","mappings":"2OACA,G,QAAA,CAAgB,UAAY,8BAA8B,cAAgB,kCAAkC,QAAU,4BAA4B,KAAO,2B,kDC0IzJ,EA7HmB,SAAAA,GACjB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IACnBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAUJ,EAAAA,EAAAA,IAAYK,EAAAA,IAE5B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAgBP,IAAYG,IAAUE,EAEtCG,EAAgBb,GAAQA,EAAK,GAAGc,cAAgBd,EAAKe,MAAM,EAAGf,EAAKgB,SAEvEC,EAAAA,EAAAA,YAAU,WACLd,GACLe,EAAAA,GAAAA,MALiB,6BAMlB,GAAE,CAACf,KAGJc,EAAAA,EAAAA,YAAU,WACHjB,GACLkB,EAAAA,GAAAA,QAAA,UAAiBL,EAAjB,0BAED,GAAE,CAACb,EAAMa,IAWV,OACE,iCACA,UAAC,IAAD,CACEb,KAAK,eACLmB,UAAWC,EAAAA,UACXC,cAAe,CACbC,UAAU,GAEZC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,SArBa,SAAC,GACjB,IACOC,EAAc,CAAEnB,MADxB,EADoBA,MAEWE,SAD/B,EAD2BA,UAGzBZ,GAAS8B,EAAAA,EAAAA,IAAOD,GACjB,EAKC,WAeE,SAAC,SAAD,CACE3B,KAAK,QACL6B,MAAM,SACNC,SAAU,SAAAC,GAAC,OAAGtB,EAASsB,EAAEC,OAAOC,MAArB,EAEXC,MAAO,CACL,CACEC,KAAM,QACNC,QAAS,kCAEX,CACEC,UAAU,EACVD,QAAS,8BAZf,UAgBE,SAAC,IAAD,CAEAE,YAAY,4BACZC,QAAQ,SAACC,EAAA,EAAD,SAGV,SAAC,SAAD,CACCX,MAAM,WACL7B,KAAK,WACL8B,SAAU,SAAAC,GAAC,OAAGpB,EAAYoB,EAAEC,OAAOC,MAAxB,EACXC,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,gCAPf,UAWE,SAAC,aAAD,CAEEG,QAAQ,SAACE,EAAA,EAAD,CAActB,UAAWC,EAAAA,mBACjCe,KAAK,WACLG,YAAY,uCAKhB,SAAC,SAAD,WACE,iBAAKnB,UAAWC,EAAAA,QAAhB,WAGA,SAAC,IAAD,CACEe,KAAK,UACLO,SAAS,SAETC,SAAU/B,EAJZ,qBAQA,iBACEO,UAAWC,EAAAA,cADb,WAGM,+BACC,cACHD,UAAWC,EAAAA,KACXwB,KAAK,YAFF,uCAQX,SAAC,KAAD,CAAgBC,MAAO,cAI1B,EC3HD,EARmB,WACjB,OACE,SAACC,EAAA,EAAD,CAAQC,KAAM,IAAd,UACG,SAAC,EAAD,KAGN,C","sources":["webpack://nasa/./src/components/SingInForm/SingInForm.module.css?f563","components/SingInForm/SingInForm.jsx","pages/auth/SingInPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"SingInForm_loginForm__8B6dF\",\"textContainer\":\"SingInForm_textContainer__wO9GM\",\"btnWrap\":\"SingInForm_btnWrap__BzLKS\",\"link\":\"SingInForm_link__+UJLp\"};","import { LockOutlined, SettingFilled } from '@ant-design/icons';\n\nimport { Button, Form, Input } from 'antd';\n\nimport PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'antd/dist/antd.css';\nimport s from './SingInForm.module.css'\nimport { singIn } from 'redux/auth/authOperations';\nimport { getError, getLoading, getUserName } from 'redux/auth/authSelector';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst SingInForm = props => {\n  const dispatch = useDispatch();\n  const name = useSelector(getUserName)\n  const error = useSelector(getError);\n  const loading = useSelector(getLoading);\n \n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const isBtnDisabled = loading || !email || !password;\n  const errMessage = \"INVALID_INFO, TRY_AGAIN :(\";\n  const normalizeName = name && name[0].toUpperCase() + name.slice(1, name.length);\n\n    useEffect(() => {\n    if (!error) return;\n    toast.error(errMessage)\n  }, [error])\n\n\n  useEffect(() => {\n    if (!name) return;\n    toast.success(`${normalizeName}, WELCOME ðŸ‘‹`)\n  \n  }, [name, normalizeName])\n\n \n\n  const onFinish = ({ email, password }) =>\n  { \n    const credentials = { email, password };\n    dispatch(singIn(credentials));\n  }\n  \n  \n  return (\n    <>\n    <Form\n      name=\"normal_login\"\n      className={s.loginForm}\n      initialValues={{\n        remember: true,\n      }}\n      labelCol={{\n        span: 8,\n      }}\n      wrapperCol={{\n        span: 16,\n      }}\n      onFinish={onFinish}\n    >\n      \n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        onChange={e =>setEmail(e.target.value)}\n        \n        rules={[\n          {\n            type: 'email',\n            message: \"The input is not valid E-mail!\",\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input\n        // className={s.containerInput}       \n        placeholder=\"Please input your E-mail!\"\n        prefix={<SettingFilled />}/> \n        </Form.Item>\n\n      <Form.Item\n       label=\"Password\"\n        name=\"password\"\n        onChange={e =>setPassword(e.target.value)}\n        rules={[\n          {\n            required: true,\n            message: 'Please input your Password!',\n          },\n        ]}\n      >\n        <Input.Password\n          // className={s.containerInput}\n          prefix={<LockOutlined className={s.siteFormItemIcon} />}\n          type=\"password\"\n          placeholder=\"Please enter your password  ...\"\n        />\n      </Form.Item>\n\n\n      <Form.Item>\n        <div className={s.btnWrap}>\n          \n\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          // className={s.button}\n          disabled={isBtnDisabled}\n          >\n          Log in\n            </Button>\n        <div\n          className={s.textContainer}\n        >\n              <p>Or</p>\n               <a\n            className={s.link}\n            href=\"/register\">Register Now!</a>\n          </div>\n          </div>\n      </Form.Item>\n    </Form>\n\n    <ToastContainer theme =\"colored\"/>\n    </>\n\n  );\n}\n\nSingInForm.propTypes = {}\n\nexport default SingInForm","import Appear from \"components/common/Appear\"\nimport SingInForm from \"components/SingInForm\"\n\n\nconst SingInPage = () => {\n  return (\n    <Appear time={350}>\n       <SingInForm/>\n    </Appear>\n  )\n}\n\nexport default SingInPage"],"names":["props","dispatch","useDispatch","name","useSelector","getUserName","error","getError","loading","getLoading","useState","email","setEmail","password","setPassword","isBtnDisabled","normalizeName","toUpperCase","slice","length","useEffect","toast","className","s","initialValues","remember","labelCol","span","wrapperCol","onFinish","credentials","singIn","label","onChange","e","target","value","rules","type","message","required","placeholder","prefix","SettingFilled","LockOutlined","htmlType","disabled","href","theme","Appear","time"],"sourceRoot":""}